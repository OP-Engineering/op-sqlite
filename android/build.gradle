import java.nio.file.Paths

buildscript {
  repositories {
    google()
    gradlePluginPortal()
  }

  def kotlin_version = rootProject.ext.has("kotlinVersion") ? rootProject.ext.get("kotlinVersion") : project.properties["OPSQLite_kotlinVersion"]

  dependencies {
    classpath("com.android.tools.build:gradle:7.3.1")
    // noinspection DifferentKotlinGradleVersion
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

def resolveBuildType() {
    Gradle gradle = getGradle()
    String tskReqStr = gradle.getStartParameter().getTaskRequests()['args'].toString()

    return tskReqStr.contains('Release') ? 'release' : 'debug'
}

def isNewArchitectureEnabled() {
  return project.hasProperty("newArchEnabled") && project.newArchEnabled == "true"
}

def SQLITE_FLAGS = rootProject.properties['OPSQLiteFlags']

if (isNewArchitectureEnabled()) {
    apply plugin: "com.facebook.react"
}

apply plugin: 'com.android.library'
apply plugin: "kotlin-android"

def safeExtGet(prop, fallback) {
  rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

def reactNativeArchitectures() {
  def value = project.getProperties().get("reactNativeArchitectures")
  return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["OPSQLite" + name]
}

def USE_HERMES = rootProject.ext.hermesEnabled

android {
  
  compileSdkVersion safeExtGet("compileSdkVersion", 33)
  namespace "com.op.sqlite"
  
  // Used to override the NDK path/version on internal CI or by allowing
  // users to customize the NDK path/version from their root project (e.g. for M1 support)
  if (rootProject.hasProperty("ndkPath")) {
    ndkPath rootProject.ext.ndkPath
  }
  if (rootProject.hasProperty("ndkVersion")) {
    ndkVersion rootProject.ext.ndkVersion
  }

  buildFeatures {
    prefab true
  }

  defaultConfig {
    minSdkVersion 23 
    targetSdkVersion safeExtGet('targetSdkVersion', 34)
    versionCode 1
    versionName "1.0"
    
    externalNativeBuild {
        cmake {
            if(System.getenv("OP_SQLITE_PERF") == '1') {
              println "OP-SQLITE performance mode enabled! ðŸš€"
              cFlags  += ["-DSQLITE_DQS=0", "-DSQLITE_THREADSAFE=0", "-DSQLITE_DEFAULT_MEMSTATUS=0", "-DSQLITE_DEFAULT_WAL_SYNCHRONOUS=1", "-DSQLITE_LIKE_DOESNT_MATCH_BLOBS=1", "-DSQLITE_MAX_EXPR_DEPTH=0", "-DSQLITE_OMIT_DEPRECATED=1", "-DSQLITE_OMIT_PROGRESS_CALLBACK=1", "-DSQLITE_OMIT_SHARED_CACHE=1", "-DSQLITE_USE_ALLOCA=1"]
            }
            if(System.getenv("OP_SQLITE_PERF") == '2') {
              println "OP-SQLITE (thread safe) performance mode enabled! ðŸš€"
              cFlags += ["-DSQLITE_DQS=0", "-DSQLITE_THREADSAFE=1", "-DSQLITE_DEFAULT_MEMSTATUS=0", "-DSQLITE_DEFAULT_WAL_SYNCHRONOUS=1", "-DSQLITE_LIKE_DOESNT_MATCH_BLOBS=1", "-DSQLITE_MAX_EXPR_DEPTH=0", "-DSQLITE_OMIT_DEPRECATED=1", "-DSQLITE_OMIT_PROGRESS_CALLBACK=1", "-DSQLITE_OMIT_SHARED_CACHE=1", "-DSQLITE_USE_ALLOCA=1"]
            }

            if(System.getenv("OP_SQLITE_USE_SQLCIPHER") == '1') {
              println "OP-SQLITE using SQLCipher! ðŸ”’"
              cFlags += "-DOP_SQLITE_USE_SQLCIPHER=1"
            }

            cppFlags "-O2", "-fexceptions", "-frtti", "-std=c++1y", "-DONANDROID"
            abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
            arguments "-DANDROID_STL=c++_shared",
              "-DSQLITE_FLAGS='${SQLITE_FLAGS ? SQLITE_FLAGS : ''}'"
              "-DOP_SQLITE_USE_SQLCIPHER='${System.getenv("OP_SQLITE_USE_SQLCIPHER") == '1'? 1 : 0}'"
            abiFilters (*reactNativeArchitectures())
        }
    }

    packagingOptions {
      doNotStrip resolveBuildType() == 'debug' ? "**/**/*.so" : ''
      excludes = [
              "META-INF",
              "META-INF/**",
              "**/libjsi.so",
              "**/libreact_nativemodule_core.so",
              "**/libturbomodulejsijni.so",
              "**/libc++_shared.so",
              "**/libfbjni.so"
      ]
    }
    
  }
  
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  externalNativeBuild {
    cmake {
      path "CMakeLists.txt"
    }
  }

  sourceSets.main {
    java {
      // TODO removed the codegen config to allow the package to be built under bridgeless
      // Once there is a stable API for C++ Turbo Modules, maybe this can be enabled again
      // if (!isNewArchitectureEnabled()) {
        srcDirs += 'src/paper/java'
      // }
    }
  }
}

repositories {
  mavenCentral()
  google()
}

def kotlin_version = getExtOrDefault("kotlinVersion")
dependencies {
  implementation 'com.facebook.react:react-native'
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  if (System.getenv("OP_SQLITE_USE_SQLCIPHER") == '1') {
    implementation('com.android.ndk.thirdparty:openssl:1.1.1q-beta-1')
  }
}

// Resolves "LOCAL_SRC_FILES points to a missing file, Check that libfb.so exists or that its path is correct".
tasks.whenTaskAdded { task ->
  if (task.name.contains("configureCMakeDebug")) {
    rootProject.getTasksByName("packageReactNdkDebugLibs", true).forEach {
      task.dependsOn(it)
    }
  }
  // We want to add a dependency for both configureCMakeRelease and configureCMakeRelWithDebInfo
  if (task.name.contains("configureCMakeRel")) {
    rootProject.getTasksByName("packageReactNdkReleaseLibs", true).forEach {
      task.dependsOn(it)
    }
  }
}
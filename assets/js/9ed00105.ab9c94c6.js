"use strict";(self.webpackChunkop_sqlite=self.webpackChunkop_sqlite||[]).push([[873],{8730:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"configuration","title":"Configuration","description":"Database Location","source":"@site/docs/configuration.md","sourceDirName":".","slug":"/configuration","permalink":"/op-sqlite/docs/configuration","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/configuration.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Installation","permalink":"/op-sqlite/docs/installation"},"next":{"title":"Gotchas","permalink":"/op-sqlite/docs/gotchas"}}');var s=a(4848),t=a(8453);const i={sidebar_position:2},r="Configuration",l={},d=[{value:"Database Location",id:"database-location",level:2},{value:"Default location",id:"default-location",level:3},{value:"Relative location",id:"relative-location",level:3},{value:"Absolute paths",id:"absolute-paths",level:3},{value:"In-memory",id:"in-memory",level:3},{value:"Loading an existing database",id:"loading-an-existing-database",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"configuration",children:"Configuration"})}),"\n",(0,s.jsx)(n.h2,{id:"database-location",children:"Database Location"}),"\n",(0,s.jsx)(n.h3,{id:"default-location",children:"Default location"}),"\n",(0,s.jsxs)(n.p,{children:["If you don't pass a\xa0",(0,s.jsx)(n.code,{children:"location"}),"\xa0the library creates/opens databases by appending the passed name plus, the\xa0",(0,s.jsx)(n.a,{href:"https://github.com/OP-Engineering/op-sqlite/blob/main/ios/OPSQLite.mm#L51",children:"library directory on iOS"}),"\xa0and the\xa0",(0,s.jsx)(n.a,{href:"https://github.com/OP-Engineering/op-sqlite/blob/main/android/src/main/java/com/op/sqlite/OPSQLiteBridge.java#L18",children:"database directory on Android"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"relative-location",children:"Relative location"}),"\n",(0,s.jsx)(n.p,{children:"You can use relative location to navigate in and out of the\xa0default location"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { open } from '@op-engineering/op-sqlite';\n\nconst db = open({\n  name: 'myDB',\n  location: '../files/databases',\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"Note that on iOS the file system is sand-boxed, so you cannot access files/directories outside your app bundle directories."}),"\n",(0,s.jsx)(n.h3,{id:"absolute-paths",children:"Absolute paths"}),"\n",(0,s.jsx)(n.p,{children:"You can also pass absolute paths to completely change the location of the database, the library exports useful paths you can use:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import {\n  IOS_LIBRARY_PATH, // Default iOS\n  IOS_DOCUMENT_PATH,\n  ANDROID_DATABASE_PATH, // Default Android\n  ANDROID_FILES_PATH,\n  ANDROID_EXTERNAL_FILES_PATH, // Android SD Card\n  open,\n} from '@op-engineering/op-sqlite';\n\nconst db = open({\n  name: 'myDb',\n  location: Platform.OS === 'ios' ? IOS_LIBRARY_PATH : ANDROID_DATABASE_PATH,\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"If you want to access the SD card app's directory:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"const db = open({\n  name: 'myDB',\n  location:\n    Platform.OS === 'ios' ? IOS_LIBRARY_PATH : ANDROID_EXTERNAL_FILES_PATH,\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can even drill down on paths:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"const db = open({\n  name: 'myDB',\n  location:\n    Platform.OS === 'ios'\n      ? IOS_LIBRARY_PATH\n      : `${ANDROID_EXTERNAL_FILES_PATH}/dbs/`,\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"in-memory",children:"In-memory"}),"\n",(0,s.jsxs)(n.p,{children:["Using SQLite in-memory mode is supported by passing a\xa0",(0,s.jsx)(n.code,{children:"':memory:'"}),"\xa0as a location:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { open } from '@op-engineering/op-sqlite';\n\nconst largeDb = open({\n  name: 'inMemoryDb',\n  location: ':memory:',\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"In memory databases are faster since they don't need to hit the disk I/O to save the data and are useful for synchronization only workflows."}),"\n",(0,s.jsx)(n.h2,{id:"loading-an-existing-database",children:"Loading an existing database"}),"\n",(0,s.jsx)(n.p,{children:"Depending on where you have your database there are a few things to go about this:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"If you add it to your bundle (via assets): YOU MUST MOVE IT BEFORE WRITING TO IT. App assets are read only anyways. In order to make the moving process easier OP SQLite provides a function that easily moves it for you!"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Create an assets folder"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Place your database at the root of that folder, in this example we will place a ",(0,s.jsx)(n.code,{children:"assets/sample.sqlite"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Configure ",(0,s.jsx)(n.code,{children:"react-native.config.js"})," correctly"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"module.exports = {\n  assets: ['./assets/'],\n};\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Link your assets"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npx react-native-asset@latest\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Finally when your app starts you can move it to the default location an open it normally. The ",(0,s.jsx)(n.code,{children:"moveAssetsDatabase"})," is idempotent, if the database has already been copied it will not do anything but return true, so it\u2019s safe to leave there."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { moveAssetsDatabase, open } from '@op-engineering/op-sqlite';\n\nconst openAssetsDb = async () => {\n  const moved = await moveAssetsDatabase({ filename: 'sample.sqlite' });\n  if (!moved) {\n    throw new Error('Could not move assets database');\n  }\n  const db = open({ name: 'sample.sqlite' });\n  const users = await db.execute('SELECT * FROM User');\n  console.log('users', users.rows);\n};\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"If you have a server you can download it directly to the default directory and directly open it."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import FetchBlob from 'react-native-fetch-blob';\nimport {\n  IOS_LIBRARY_PATH, // Default iOS\n  ANDROID_DATABASE_PATH, // Default Android\n} from '@op-engineering/op-sqlite';\n\n// Pseudo-code replace with the proper calls however you download the database\nasync function downloadAndMove() {\n  await FetchBlob.download(\n    `<download url>/sample.sqlite`,\n    Platform.OS === 'ios' ? IOS_LIBRARY_PATH : ANDROID_DATABASE_PATH\n  );\n}\n\nopenDb = () => {\n  const db = open({ name: 'sample.sqlite' });\n  const users = await db.execute('SELECT * FROM User');\n  console.log('users', users.rows?._array);\n};\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"app-groups-ios-only",children:"App groups (iOS only)**"}),"\n",(0,s.jsx)(n.p,{children:"On iOS, the SQLite database can be placed in an app group, in order to make it accessible from other apps in that app group. E.g. for sharing capabilities between apps, widgets or quick-apps."}),"\n",(0,s.jsxs)(n.p,{children:["To use an app group, add the app group ID as the value for the\xa0",(0,s.jsx)(n.code,{children:"OPSQLite_AppGroup"}),"\xa0key in your project's\xa0",(0,s.jsx)(n.code,{children:"Info.plist"}),"\xa0file. You'll also need to configure the app group in your project settings. (Xcode \u2192 Project Settings \u2192 Signing & Capabilities \u2192 Add Capability \u2192 App Groups)"]}),"\n",(0,s.jsx)(n.h1,{id:"runtime-tweaks",children:"Runtime tweaks"}),"\n",(0,s.jsxs)(n.p,{children:["You can tweak SQLite to be even faster (with some caveats) on runtime as well. One option is\xa0",(0,s.jsx)(n.a,{href:"https://www.sqlite.org/mmap.html",children:"Memory Mapping"}),". It allows to read/write to/from the disk without going through the kernel. However, if your queries throw an error your application might crash."]}),"\n",(0,s.jsx)(n.p,{children:"To turn on Memory Mapping, execute the following pragma statement after opening a db:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"const db = open({\n  name: 'mydb.sqlite',\n});\n\n// 0 turns off memory mapping, any other number enables it with the cache size\nawait db.execute('PRAGMA mmap_size=268435456');\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can also set journaling to memory (or even OFF if you are kinda crazy) to gain even more speed. Journaling is what allows SQLite to ROLLBACK statements and modifying it dangerous, so do it at your own risk"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"await db.execute('PRAGMA journal_mode = MEMORY;'); // or OFF\n"})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>r});var o=a(6540);const s={},t=o.createContext(s);function i(e){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkop_sqlite=self.webpackChunkop_sqlite||[]).push([[95],{3741:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"gotchas","title":"Gotchas","description":"SQLite being a C library and React Native being a JS framework, sometimes create conflicts. You should take these into account when using the library.","source":"@site/docs/gotchas.md","sourceDirName":".","slug":"/gotchas","permalink":"/op-sqlite/docs/gotchas","draft":false,"unlisted":false,"editUrl":"https://github.com/OP-Engineering/op-sqlite/blob/main/docs/gotchas.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Configuration","permalink":"/op-sqlite/docs/configuration"},"next":{"title":"Debugging","permalink":"/op-sqlite/docs/debugging"}}');var i=n(4848),r=n(8453);const o={sidebar_position:3},a="Gotchas",c={},l=[{value:"JavaScript Numbers",id:"javascript-numbers",level:2},{value:"SQLite Gotchas",id:"sqlite-gotchas",level:2},{value:"Strictness",id:"strictness",level:3},{value:"Foreign constraints",id:"foreign-constraints",level:3},{value:"Error codes",id:"error-codes",level:3},{value:"Other Quirks",id:"other-quirks",level:3},{value:"HostObjects Quirks",id:"hostobjects-quirks",level:2},{value:"Closing a connection",id:"closing-a-connection",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"gotchas",children:"Gotchas"})}),"\n",(0,i.jsx)(t.p,{children:"SQLite being a C library and React Native being a JS framework, sometimes create conflicts. You should take these into account when using the library."}),"\n",(0,i.jsx)(t.h2,{id:"javascript-numbers",children:"JavaScript Numbers"}),"\n",(0,i.jsxs)(t.p,{children:["Every JS number is a ",(0,i.jsx)(t.code,{children:"double"}),". This means you can only have integers represented up to ",(0,i.jsx)(t.code,{children:"2^53"})," bits (",(0,i.jsx)(t.code,{children:"Number.MAX_SAFE_INTEGER"}),"). Although sqlite supports 64 bit ints (",(0,i.jsx)(t.code,{children:"long long"}),"), the numbers returned to JS will be truncated when you query a value bigger than what a JS number can represent."]}),"\n",(0,i.jsxs)(t.p,{children:["If you need to store larger numbers you should use a ",(0,i.jsx)(t.code,{children:"BigInt"})," object, however, such a type is not natively supported by sqlite, so you will have to serialize and deserialize from/to strings when you do your queries:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"// Create your table with the correct types AND USE STRICT TYPING\ndb.executeSync(\n  'CREATE TABLE IF NOT EXISTS NumbersTable (myBigInt TEXT NOT NULL) STRICT'\n);\n\n// When inserting, convert bigint into a string\ndb.executeSync('INSERT INTO NumbersTable VALUES (?)', [\n  bigint('123').toString(),\n]);\n\n// When retrieving, convert string into bigint\nlet res = db.executeSync('SELECT * FROM NumbersTable');\nlet myBigint = BigInt(res.rows[0].myBigInt);\n"})}),"\n",(0,i.jsx)(t.h2,{id:"sqlite-gotchas",children:"SQLite Gotchas"}),"\n",(0,i.jsx)(t.h3,{id:"strictness",children:"Strictness"}),"\n",(0,i.jsxs)(t.p,{children:["Sqlite by default does not strictly check for types. If you want type safety, you need to use the\xa0",(0,i.jsx)(t.code,{children:"STRICT"}),"\xa0keyword."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"await db.execute('CREATE TABLE Test (id INT PRIMARY KEY, name TEXT) STRICT;');\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Otherwise, sqlite does a weak attempt at casting and if it fails it inserts whatever you passed into your table, independetly of the declared type. e.g. If you try to insert a string ",(0,i.jsx)(t.code,{children:'"1"'})," into a ",(0,i.jsx)(t.code,{children:"INTEGER"})," column, it will be casted to an int before insertion and behave as a number (see above) when the table is queried."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"https://sqlite.org/datatype3.html",children:"Read the sqlite docs on data types and their loose typing and how it can be the source of subtle bugs"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"foreign-constraints",children:"Foreign constraints"}),"\n",(0,i.jsxs)(t.p,{children:["When sqlite evaluates your query and you have forgein key constraints, it keeps track of the satisfied relations via a simple counter. Once your statement finishes executing and the counter is not 0, it then throws a ",(0,i.jsx)(t.code,{children:"foreign key constraint failed"})," error, with no information whatsoever of which foreign constraint failed. Unfortunately, this simple design means it is impossible to catch which foreign constraint has failed and you will receive a generic error. Nothing op-sqlite can do about it, it's a design flaw in SQLite."]}),"\n",(0,i.jsx)(t.p,{children:"Additionaly, the default behavior is not to enforce foreign key constraints. You need to turn the constraint checking on, after opening your connection:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"db.executeSync('PRAGMA foreign_keys = true');\n"})}),"\n",(0,i.jsx)(t.h3,{id:"error-codes",children:"Error codes"}),"\n",(0,i.jsxs)(t.p,{children:["Sometimes you might be using valid SQL syntax for other engines or you might be doing something else wrong. The errors returned by op-sqlite contain the raw error code returned by SQLite and you should check\xa0",(0,i.jsx)(t.a,{href:"https://www.sqlite.org/rescode.html",children:"the sqlite error reference"}),"\xa0for more detailed information."]}),"\n",(0,i.jsx)(t.h3,{id:"other-quirks",children:"Other Quirks"}),"\n",(0,i.jsxs)(t.p,{children:["See the\xa0",(0,i.jsx)(t.a,{href:"https://www.sqlite.org/quirks.html",children:"full list of SQLite quirks"})," that also apply to op-sqlite."]}),"\n",(0,i.jsx)(t.h2,{id:"hostobjects-quirks",children:"HostObjects Quirks"}),"\n",(0,i.jsxs)(t.p,{children:["op-sqlite can return HostObjects via the ",(0,i.jsx)(t.code,{children:"executeWithHostObjects"})," API, basically C++ objects exposed to JS. They are super fast to create at the cost of runtime access. However, by them being C++ objects, it means some JS operations won't work."]}),"\n",(0,i.jsx)(t.p,{children:"You can write single properties with scalars, for example:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"let results = await db.executeWithHostObjects('SELECT * FROM USER;');\nresults._array[0].newProp = 'myNewProp';\n"})}),"\n",(0,i.jsx)(t.p,{children:"As for trying to assign any object to a property, unfortunately, won't work."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"results._array[0].newProp = { foo: 'bar' };\n"})}),"\n",(0,i.jsxs)(t.p,{children:["On the C++ side properties need to be\xa0",(0,i.jsx)(t.a,{href:"https://github.com/OP-Engineering/op-sqlite/blob/main/cpp/DumbHostObject.cpp?rgh-link-date=2024-03-09T07%3A31%3A31Z#L62",children:"stored"}),"\xa0and\xa0",(0,i.jsx)(t.a,{href:"https://github.com/OP-Engineering/op-sqlite/blob/main/cpp/utils.cpp?rgh-link-date=2024-03-09T07%3A31%3A31Z#L64",children:"cast to C++ types"}),". Mostly to prevent race conditions and de-allocation between the JS Runtime and C++. Basically, not a bug, but rather a limitation of HostObjects."]}),"\n",(0,i.jsx)(t.p,{children:"You might want to try to create a completely new pure JS object to achieve this:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"let newUser = { ...{}, ...results._array[0], newProp: { foo: 'bar' } };\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Sometimes\xa0",(0,i.jsx)(t.code,{children:"{...item, blah: 'foo'}"}),"\xa0gets transpiled to\xa0",(0,i.jsx)(t.code,{children:"Object.assign(item, {blah: 'foo'}"}),", so that\u2019s why you might need to use the quirky ",(0,i.jsx)(t.code,{children:"...{}"})," at the beginning."]}),"\n",(0,i.jsx)(t.h2,{id:"closing-a-connection",children:"Closing a connection"}),"\n",(0,i.jsxs)(t.p,{children:["If you use ",(0,i.jsx)(t.code,{children:"react-native-restart"})," or your app has a non-standard lifecycle and \u201creloads\u201d itself at some point during runtime. It\u2019s important that you call ",(0,i.jsx)(t.code,{children:"db.close()"})," before to avoid crashes and memory leaks."]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var s=n(6540);const i={},r=s.createContext(i);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);
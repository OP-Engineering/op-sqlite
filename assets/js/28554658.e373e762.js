"use strict";(self.webpackChunkop_sqlite=self.webpackChunkop_sqlite||[]).push([[658],{5205:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"reactive_queries","title":"Reactive Queries","description":"You can subscribe to changes to your database via the use of native queries. Reactivity is achieved through sqlite\u2019s update hook and are executed on the native level which means they are blazing fast.","source":"@site/docs/reactive_queries.md","sourceDirName":".","slug":"/reactive_queries","permalink":"/op-sqlite/docs/reactive_queries","draft":false,"unlisted":false,"editUrl":"https://github.com/OP-Engineering/op-sqlite/blob/main/docs/reactive_queries.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Debugging","permalink":"/op-sqlite/docs/debugging"},"next":{"title":"Custom Tokenizers","permalink":"/op-sqlite/docs/tokenizers"}}');var i=n(4848),r=n(8453);const o={sidebar_position:5},a="Reactive Queries",c={},u=[{value:"How reactive queries work",id:"how-reactive-queries-work",level:2},{value:"Table queries",id:"table-queries",level:2},{value:"Row queries",id:"row-queries",level:2},{value:"Complex queries",id:"complex-queries",level:2}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"reactive-queries",children:"Reactive Queries"})}),"\n",(0,i.jsxs)(t.p,{children:["You can subscribe to changes to your database via the use of native queries. Reactivity is achieved through sqlite\u2019s ",(0,i.jsx)(t.a,{href:"https://sqlite.org/c3ref/update_hook.html",children:"update hook"})," and are executed on the native level which means they are blazing fast."]}),"\n",(0,i.jsx)(t.h2,{id:"how-reactive-queries-work",children:"How reactive queries work"}),"\n",(0,i.jsx)(t.p,{children:"Reactive queries work by re-executing your SQL query when a table or row id are detected to change. Re-running an entire query might be expensive, so internally the query is stored as a prepared statement to optimize the callbacks, there is nothing you need to do for this optimization. The filtering of events is also implemented on C++ which means it is as fast as possible based on the observed tables and rows."}),"\n",(0,i.jsxs)(t.p,{children:["It\u2019s important to notice that due to the dependency on sqlite\u2019s update hook, the row id is not the primary key of the table, but the ",(0,i.jsx)(t.a,{href:"https://www.sqlite.org/rowidtable.html",children:"row id"})," column. If you are using a different primary key, this will not match. You will see in the examples below how to retrieve the corresponding row id for a specific table row."]}),"\n",(0,i.jsx)(t.p,{children:"Most important of all, is that reactive queries are only triggered on transactions due to technical limitations."}),"\n",(0,i.jsx)(t.h2,{id:"table-queries",children:"Table queries"}),"\n",(0,i.jsx)(t.p,{children:"You can subscribe to a table being changed, this would be useful whenever you are querying for a list of elements:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"let unsubscribe = db.reactiveExecute({\n  query: 'SELECT * FROM Users',\n  fireOn: [\n    {\n      table: 'User',\n    },\n  ],\n  callback: (usersResponse) => {\n    console.log(usersReponse.rows); // should print the entire list of users\n    // You can pair this with your favourite state management\n    // If you would do this with a mobx store\n    runInAction(() => {\n      this.users = usersReponse.rows;\n    });\n  },\n});\n\n// If you later want to stop receiving updates or you eliminate the row you are watching\nunsubscribe();\n\n// To trigger the reactive query you need to execute a transaction. The query will be re-run\n// at the end of the transaction\nawait db.transaction(async () => {\n  await db.execute('...'); // Do a query that mutates the table\n});\n"})}),"\n",(0,i.jsx)(t.h2,{id:"row-queries",children:"Row queries"}),"\n",(0,i.jsx)(t.p,{children:"You can also subscribe to specific rows. Here you need to retrieve the row id in order to subscribe to the specific row whenever it updates."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"let rowid = db\n  .execute('SELECT rowid WHERE id = ? FROM Users', [123])\n  .item(0).rowid;\n\nlet unsubscribe = db.reactiveExecute({\n  query: 'SELECT * WHERE id = ? FROM Users',\n  arguments: ['123'],\n  fireOn: [\n    {\n      table: 'Users',\n      ids: [rowId],\n    },\n  ],\n  callback: (userResponse) => {\n    console.log(usersReponse.item(0)); // should print the user whenever it updates\n  },\n});\n"})}),"\n",(0,i.jsx)(t.h2,{id:"complex-queries",children:"Complex queries"}),"\n",(0,i.jsx)(t.p,{children:"The entire query is re-ran every time there is a change detected, so you can use whatever sql statement you want. This operation can be potentially slow but op-sqlite is already heavily optimized to reduce any overhead between the native sqlite response and the JS code possible."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"let unsubscribe = db.reactiveExecute({\n  query: `SELECT \n    c.customer_id,\n    c.first_name,\n    c.last_name,\n    c.email,\n    COUNT(o.order_id) AS total_orders,\n    SUM(o.total_amount) AS total_spent\nFROM \n    customers c\nLEFT JOIN \n    orders o ON c.customer_id = o.customer_id\nGROUP BY \n    c.customer_id, c.first_name, c.last_name, c.email\nORDER BY \n    total_spent DESC;`,\n  arguments: [],\n  fireOn: [\n    {\n      table: 'customers',\n    },\n    {\n      table: 'orders',\n    },\n  ],\n  callback: (data: any) => {\n    // data = normal op-sqlite response\n  },\n});\n"})})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var s=n(6540);const i={},r=s.createContext(i);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);
"use strict";(self.webpackChunkop_sqlite=self.webpackChunkop_sqlite||[]).push([[227],{368:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"key_value_storage","title":"Key-Value Storage","description":"OP-SQLite provides a simple key-value storage API compatible with react-native-async-storage. It should be much faster than async-storage (whilst slower than MMKV) but comes with the convenience of not having to add one more dependency to your app. For convenience it also has sync versions of the methods. If you use SQLCipher the data inside will also be encrypted.","source":"@site/docs/key_value_storage.md","sourceDirName":".","slug":"/key_value_storage","permalink":"/op-sqlite/docs/key_value_storage","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/key_value_storage.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"Custom Tokenizers","permalink":"/op-sqlite/docs/tokenizers"},"next":{"title":"API Reference","permalink":"/op-sqlite/docs/api"}}');var a=o(4848),s=o(8453);const r={sidebar_position:8},i="Key-Value Storage",c={},l=[];function d(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"key-value-storage",children:"Key-Value Storage"})}),"\n",(0,a.jsx)(t.p,{children:"OP-SQLite provides a simple key-value storage API compatible with react-native-async-storage. It should be much faster than async-storage (whilst slower than MMKV) but comes with the convenience of not having to add one more dependency to your app. For convenience it also has sync versions of the methods. If you use SQLCipher the data inside will also be encrypted."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"import { Storage } from '@op-engineering/op-sqlite';\n\n// Storage is backed by it's own database\n// You can set the location like any other op-sqlite database\nconst storage = new Storage({\n  location: 'storage', // Optional, see location param on normal databases\n  encryptionKey: 'myEncryptionKey', // Optional, only used when used against SQLCipher\n});\n\nconst item = storage.getItemSync('foo');\n\nconst item2 = await storage.getItem('foo');\n\nawait storage.setItem('foo', 'bar');\n\nstorage.setItemSync('foo', 'bar');\n\nconst allKeys = storage.getAllKeys();\n\n// Clears the internal table\nstorage.clear();\n"})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>r,x:()=>i});var n=o(6540);const a={},s=n.createContext(a);function r(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);